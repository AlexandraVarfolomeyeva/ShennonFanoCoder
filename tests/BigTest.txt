В текущей реализации, по крайней мере, строки занимают 20+ (n/2) * 4 байта (округляя значение n/2 down), где n - количество символов в строке. Тип строки необычен тем, что размер самого объекта изменяется. Единственные другие классы, которые делают это (насколько я знаю), являются массивами. По существу, строка представляет собой массив символов в памяти, а также длину массива и длину строки (в символах). Длина массива не всегда совпадает с длиной в символах, так как строки могут быть "перераспределены" в mscorlib.dll, чтобы упростить их создание. (Например, StringBuilder делает это.) Хотя строки неизменяемы для внешнего мира, код в mscorlib может изменять содержимое, поэтому StringBuilder создает строку с большим внутренним массивом символов, чем требуется для текущего содержимого, а затем присоединяется к этой строке до тех пор, пока массив символов уже не достаточно велик, чтобы справиться, и в этот момент он создает новую строку с большим массивом. Элемент длины строки также содержит флаг в своем верхнем бите, чтобы сказать, содержит ли строка какие-либо символы, отличные от ASCII. В некоторых случаях это обеспечивает дополнительную оптимизацию.
public static byte[] ToByteArray(string value)
{            
    char[] charArr = value.ToCharArray();
    byte[] bytes = new byte[charArr.Length];
    for (int i = 0; i < charArr.Length; i++)
    {
        byte current = Convert.ToByte(charArr[i]);
        bytes[i] = current;
    }

    return bytes;
}